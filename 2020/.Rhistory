newString = ifelse(substr(strrep(rep1,ceiling((3*(row_number()-1)+1)/str_length(input[1,1]))),
(3*(row_number()-1)+1),(3*(row_number()-1)+1)) == "#",1,0)
)
input %>%
mutate(
tree = ifelse(substr(strrep(rep1,ceiling((3*(row_number()-1)+1)/str_length(input[1,1]))),
(3*(row_number()-1)+1),(3*(row_number()-1)+1)) == "#",1,0)
) %>%
summarise(sum(tree))
input %>%
mutate(
tree = ifelse(substr(str_replace(strrep(rep1,ceiling((3*(row_number()-1)+1)/str_length(input[1,1]))),
(3*(row_number()-1)+1),(3*(row_number()-1)+1)," ","" )) == "#",1,0)
) %>%
summarise(sum(tree))
input %>%
mutate(
tree = ifelse(substr(str_replace(strrep(rep1,ceiling((3*(row_number()-1)+1)/str_length(input[1,1]))),
(3*(row_number()-1)+1),(3*(row_number()-1)+1))," ","" ) == "#",1,0)
) %>%
summarise(sum(tree))
input %>%
mutate(
strPosToRead = 3*(row_number()-1)+1,
stripeWidth = str_length(input[1,1])
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#",1,0)
) %>%
summarise(sum(tree))
input %>%
mutate(
strPosToRead = 3*(row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#",1,0)
) %>%
summarise(sum(tree))
input %>%
mutate(
strPosToRead = 3*(row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#",1,0)
)
input %>%
mutate(
strPosToRead = 3*(row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#",1,0)
)
#-----
input<- read.csv('./Day3/input.csv',header = F, col.names = 'rep1',stringsAsFactors = F,strip.white = T)
input %>%
mutate(
strPosToRead = 3*(row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#",1,0)
) %>%
summarise(sum(tree))
input %>%
mutate(
strPosToRead = 3*(row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#",1,0)
) %>%
summarise(sum(tree))
#-----
paths <- data.frame(one = c(1,1))
View(paths)
#-----
paths <- matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2)
View(paths)
#-----
paths <- as.data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2))
paths <- as.data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2))
sapply(paths, function(x){
print(paste0("x = ",x[1]," | ","y = ",x[2]))
})
paths <- as.data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2))
sapply(paths, function(x){
print(paste0("x = ",x[1]," | ","y = ",x[2]))
})
mapply(paths, function(x){
print(paste0("x = ",x[1]," | ","y = ",x[2]))
})
mapply(paths, function(x){
print(paste0("x = ",x[1]," | ","y = ",x[2]))
})
print(paste0("x = ",x[,1]," | ","y = ",x[,2]))
sapply(paths, function(x){
print(paste0("x = ",x[,1]," | ","y = ",x[,2]))
})
print(paste0("x = ",x[1]," | ","y = ",x[2]))
paths <- matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2)
sapply(paths, function(x){
print(paste0("x = ",x[1]," | ","y = ",x[2]))
})
paths <- matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2)
sapply(paths, function(x){
print(paste0("x = ",x[1]," | ","y = ",x[2]))
})
#-----
paths <- as.data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2))
sapply(paths, function(x){
print(paste0("x = ",x$V1," | ","y = ",x$V2))
})
sapply(paths, function(x){
print(paste0("x = ",x[,"V1"]," | ","y = ",x[,"V2"]))
})
print(paste0("x = ",x["V1"]," | ","y = ",x["V2"]))
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2))
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2),col.names = c("right","down"))
matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2)
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2),colnames = c("right","down"))
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2))
for (i in paths){
input %>%
mutate(
strPosToRead = paths[i,1] * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & (row_number() + 1) %% paths[i,2] == 0,1,0)
) %>%
summarise(sum(tree))
}
for (i in paths){
right <- paths[i,1]
down <- paths[i,2]
input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & (row_number() + 1) %% down == 0,1,0)
) %>%
summarise(sum(tree))
}
input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
) %>%
summarise(sum(tree))
for (i in paths){
right <- paths[i,1]
down <- paths[i,2]
input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
) %>%
summarise(sum(tree))
}
print(down)
for (i in paths){
right <- paths[i,1]
down <- paths[i,2]
print(right)
print(down)
# input %>%
#   mutate(
#     strPosToRead = right * (row_number()-1)+1,
#     stripeWidth = str_length(input[1,1]),
#     strRepsNeeded = ceiling(strPosToRead/stripeWidth),
#     tree = ifelse(substr(strrep(rep1,strRepsNeeded),
#                          strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
#   ) %>%
#   summarise(sum(tree))
}
for (i in 1:nrow(paths)){
right <- paths[i,1]
down <- paths[i,2]
print(right)
print(down)
# input %>%
#   mutate(
#     strPosToRead = right * (row_number()-1)+1,
#     stripeWidth = str_length(input[1,1]),
#     strRepsNeeded = ceiling(strPosToRead/stripeWidth),
#     tree = ifelse(substr(strrep(rep1,strRepsNeeded),
#                          strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
#   ) %>%
#   summarise(sum(tree))
}
for (i in 1:nrow(paths)){
right <- paths[i,1]
down <- paths[i,2]
input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
) %>%
summarise(sum(tree))
}
paths[i,"trees"] <- input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
) %>%
summarise(sum(tree))
View(paths)
for (i in 1:nrow(paths)){
right <- paths[i,1]
down <- paths[i,2]
paths[i,"trees"] <- input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
) %>%
summarise(sum(tree))
}
input %>%
mutate(
Path1Pos = 1*(row_number()-1)+1,
Path2Pos = 3*(row_number()-1)+1,
Path3Pos = 5*(row_number()-1)+1
Path4Pos =
Path5Pos =
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#",1,0)
) %>%
summarise(sum(tree))
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2))
for (i in 1:nrow(paths)){
right <- paths[i,1]
down <- paths[i,2]
paths[i,"trees"] <- input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
) %>%
summarise(sum(tree))
}
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2,byrow = T))
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),ncol = 2,byrow = F))
for (i in 1:nrow(paths)){
right <- paths[i,1]
down <- paths[i,2]
paths[i,"trees"] <- input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
) %>%
summarise(sum(tree))
}
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),nrow = 5,byrow = F))
#-----
paths <- data.frame(matrix(c(1,1,3,1,5,1,7,1,1,2),nrow = 5,byrow = T))
colnames(paths) <- c("right","down")
for (i in 1:nrow(paths)){
right <- paths[i,1]
down <- paths[i,2]
paths[i,"trees"] <- input %>%
mutate(
strPosToRead = right * (row_number()-1)+1,
stripeWidth = str_length(input[1,1]),
strRepsNeeded = ceiling(strPosToRead/stripeWidth),
tree = ifelse(substr(strrep(rep1,strRepsNeeded),
strPosToRead,strPosToRead) == "#" & ((row_number() + 1) %% down) == 0,1,0)
) %>%
summarise(sum(tree))
}
sapply(paths$trees, "*")
sapply(paths$trees, *)
prod(paths$trees)
input <- read.csv('./Day4/input.csv')
View(input)
input <- read.csv('./Day4/input.csv',sep = "\n\n")
regexpr("\n\n")
regexpr(input,"\n\n")
regexpr(input,"\n\s\n")
regexpr(input,"\n+\\s")
grep("^\s*$",input)
grep("^\\s*$",input)
input <- read.csv2('./Day4/input.csv',as.is = T)
View(input)
input <- read.csv2('./Day4/input.csv',as.is = T,blank.lines.skip = F)
input <- read.csv2('./Day4/input.csv',blank.lines.skip = F,header = F)
input <- read.csv2('./Day4/input.csv',blank.lines.skip = F,header = F,sep = ",")
input <- read.csv2('./Day4/input.csv',blank.lines.skip = F,header = F,sep = ",",allowEscapes = T)
input <- read.csv2('./Day4/input.csv',blank.lines.skip = F,header = F,sep = ",",text = T)
input <- read.csv2('./Day4/input.csv',blank.lines.skip = F,header = F,sep = ",",skipNul = F)
input <- read.csv2('./Day4/input.csv',blank.lines.skip = F,header = F)
input <- readChar('./Day4/input.csv',file.info('./Day4/input.csv')$size)
input
require(stringr)
str_split(input,"^\\s*$")
str_split(input,"\n\n")
as.data.frame(str_split(input,"\n\n"))
str_split(input,"\n\n")
as.data.frame(str_split(input,"\n\n"),stringsAsFactors = F,col.names = "details")
require(tidyr)
require(dplyr)
inputdf %>%
mutate(id = rownum()) %>%
separate(details,c("key","val"),":")
inputdf <- as.data.frame(str_split(input,"\n\n"),stringsAsFactors = F,col.names = "details")
inputdf %>%
mutate(id = rownum()) %>%
separate(details,c("key","val"),":")
inputdf %>%
mutate(id = row_number()) %>%
separate(details,c("key","val"),":")
inputdf %>%
mutate(id = row_number()) %>%
extract(details,c("key","val"),":")
data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e"))
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,sep = ":")
tibble(
x = 1:3,
y = c("a", "d,e,f", "g,h"),
z = c("1", "2,3,4", "5,6")
)
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = sep = "^[:alnum:]3:")
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "^[:alnum:]3:")
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\s")
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s")
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":")
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid") %>%
group_by(id) %>%
summarise(fields = n())
require(stringr)
require(tidyr)
require(dplyr)
input <- readChar('./Day4/input.csv',file.info('./Day4/input.csv')$size)
inputdf <- as.data.frame(str_split(input,"\n\n"),stringsAsFactors = F,col.names = "details")
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid")
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid") %>%
group_by(id) %>%
summarise(fields = n())
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid") %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields = 7)
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid") %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields == 7)
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":")
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid")
View(soln)
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid") %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields == 7)
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid")
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s")
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":")
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid") %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields == 7)
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":")
soln<- inputdf %>%
mutate(id = row_number())
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s")
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":")
soln<- inputdf %>%
mutate(id = row_number())
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid" & !is.na()) %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields == 7)
soln<- inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid" ) %>%
na.omit() %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields == 7)
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid" ) %>%
na.omit() %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields == 7)
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid" ) %>%
na.omit() %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields == 7) %>%
n()
inputdf %>%
mutate(id = row_number()) %>%
separate_rows(details,convert = T, sep = "\\s") %>%
separate(details,c("key","value"),":") %>%
filter(key != "cid" ) %>%
na.omit() %>%
group_by(id) %>%
summarise(fields = n()) %>%
filter(fields == 7) %>%
nrow()
